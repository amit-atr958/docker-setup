services:
  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    hostname: zookeeper
    restart: always
    ports:
      - "2182:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
    networks:
      - kafka-network
  kafka:
    container_name: kafka
    hostname: kafka
    restart: always
    image: confluentinc/cp-kafka:5.3.0
    ports:
      - "0.0.0.0:9092:9092"
      - "0.0.0.0:29093:29093"
    environment:
      KAFKA_LISTENERS: INTERNAL://:19092,EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - kafka-network
  kafdrop:
    container_name: kafdrop-ui
    image: obsidiandynamics/kafdrop
    restart: always
    ports:
      - "8000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:19092"
      KAFKA_PROPERTIES: "bootstrap.servers=kafka:19092"
      JVM_OPTS: "-Xms32M -Xmx64M"
    depends_on:
      - kafka
    networks:
      - kafka-network

  sonarqube:
    image: sonarqube:latest
    restart: unless-stopped
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://db:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - SONAR_WEB_JAVAADDITIONALOPTS=-server
      - SONAR_CE_JAVAADDITIONALOPTS=-server
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    depends_on:
      db:
        condition: service_healthy
    networks:
      - sonarnet
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    mem_limit: 4g
    mem_reservation: 2g
    cpus: 2.0
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:9000/api/system/status | grep -q UP || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  db:
    image: postgres:13
    restart: always
    container_name: sonarqube-db
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - sonarnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql_data:

networks:
  kafka-network:
    driver: bridge
  sonarnet:
    driver: bridge
